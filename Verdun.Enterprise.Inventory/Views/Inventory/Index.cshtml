@model IEnumerable<Verdun.Enterprise.Inventory.Models.InvAssetType>

<legend>Inventory Search</legend>
<h4>To be implemented</h4>

<div class="demo-section k-content">
    <form asp-controller="Inventory" asp-action="SearchAsset" method="Get">
        @(Html.Kendo().Grid<InvAssetType>(Model)
            .Name("gridAssetType")
            .Columns(columns =>
            {
                columns.Bound(a => a.AssetTypeName).Title("<strong>Asset Type</strong>").Width(250);
                //columns.Bound(a => a.Brand).Title("<strong>Brand</strong>").Width(100);
                //columns.Bound(a => a.AssetDescription).Title("<strong>Description</strong>").Width(200);
                //columns.Bound(a => a.QuantityOnHand).Title("<strong>Quantity</strong>").Width(100);
                //columns.Bound(a => a.SerialNumber).Title("<strong>Serial #</strong>").Width(100);
                //columns.Command(command => { command.Edit(); command.Destroy(); }).Width(200);
            })
            .Editable(editable => editable.Mode(GridEditMode.InLine).ConfirmDelete("Material").DisplayDeleteConfirmation("Are you sure to delete this material?"))
            //.Pageable()
            .Selectable(selectable => selectable.Mode(GridSelectionMode.Single))
            .Sortable()
            .Scrollable()
            .Filterable()
            .HtmlAttributes(new { style = "height:650px;" })
            .DataSource(dataSource => dataSource
                .Ajax()
                //.PageSize(50)
                .Events(events => events.Error("error_handler"))
                .Model(model => model.Id(m => m.AssetTypeId ))
                //.Create(c => c.Action("EditingInline_Create", "EnterpriseApplication"))
                //.Read(read => read.Action("EditingInline_Read", "EnterpriseApplication"))
                //.Update(update => update.Action("EditingInline_Update", "EnterpriseApplication"))
                //.Destroy(d => d.Action("EditingInline_Destroy", "EnterpriseApplication"))
                .ServerOperation(false)             //--this is needed when no session cache is using.
            )
            .Events(e => e.Change("onChange"))
        //.Pageable(pageable => pageable
        //       .Refresh(true)
        //       .ButtonCount(5)
        //       .PageSizes(new[] { 5, 15, 21 })
        // Enable paging.
        )
        <br />
        <input type="hidden" id="myId" name="assetTypeId" contextmenu="dummy" />
        <input type="submit" contextmenu="Search Asset" />
    </form>
</div>

<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
            //when there is an error, cancel the action. By JC on 07/30/2020
            $("#gridMaterial").data("kendoGrid").cancelChanges();
        }
    }

    function onChange(e) {
        var selectedRow = this.select();
        var dataItem = this.dataItem(selectedRow);
        $('#myId').val(dataItem['AssetTypeId']);
        console.log(dataItem);
        console.log('id=' + $('#myId').val());
    }

</script>

@*************************   ListView ****************************************************
    <div class="demo-section k-content">
    <form asp-controller="Inventory" asp-action="SearchAsset" method="post">
        @(Html.Kendo().ListView<InvAssetType>(Model)
            .Name("AssetTypeName")
            .TagName("div")
            .ClientTemplateId("template") // This template will be used for rendering the ListView items.
            .Scrollable()
            .Selectable(ListViewSelectionMode.Single) // Set selection mode to multiple
            .HtmlAttributes(new { style = "height:350px;" })
            .DataSource(dataSource => dataSource
                .Ajax()
                .Read(read => read.Action("Read", "ListView"))
            //.PageSize(21)
            ) // The DataSource configuration. It will be used on paging.
            .Events(e => e.Change("onChange").DataBound("onDataBound"))
        )
        <br />
        <input type="hidden" id="myId" name="AssetTypeName" contextmenu="dummy" />
        <input type="submit" contextmenu="Search Asset" />
    </form>
</div>

<script type="text/x-kendo-tmpl" id="template">
    <div class="material">
        <h5>#=AssetTypeName#</h5>
    </div>
</script>

<script>
    function onChange(arg) {
        var selected = $.map(this.select(), function (item) {
            return $(item).text();
        });
        //console.log("Selected: " + selected.length + " item(s), [" + selected.join(", ") + "]");
        //console.log("Selected: " + selected);
        $('#myId').val(selected[0].trim());
        console.log(' hidden value=' + $('#myId').val());
    }

    function onDataBound(arg) {
        //console.log("ListView data bound");
    }
</script>*@