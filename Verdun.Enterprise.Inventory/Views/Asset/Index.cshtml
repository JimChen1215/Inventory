@model IEnumerable<AssetViewModel>

@{
    ViewData["Title"] = "Asset Management";
}

<legend>Asset Management</legend>
<h4>The top 20 assets created recently</h4>
<div id="divAssetIndex">
    <form asp-controller="Asset" asp-action="Edit" method="Get">
        @(Html.Kendo().Grid<AssetViewModel>(Model)
                .Name("gridAsset")
                .Columns(columns =>
                {
                    columns.Bound(a => a.AssetName).Title("<strong>Asset Name</strong>").Width(250).Locked(true).Lockable(false);
                    columns.Bound(a => a.AssetTypeName).Title("<strong>Asset Type</strong>").Width(200);
                    //columns.Bound(a => a.AssetType).ClientTemplate("#=AssetType.AssetTypeName#").Sortable(false).Title("<strong>AssetType</strong>").Width(200);   //customized dropdown
                    columns.Bound(a => a.Brand).Title("<strong>Brand</strong>").Width(200);
                    columns.Bound(a => a.QuantityOnHand).Title("<strong>Quantity</strong>").Width(200);
                    columns.Bound(a => a.AssetDescription).Title("<strong>Description</strong>").Width(200);
                    //columns.Bound(a => a.SerialNumber).Title("<strong>Serial Number</strong>").Width(150);
                    //columns.Bound(a => a.ModelName).Title("<strong>Model</strong>").Width(150);
                    //columns.Bound(a => a.ModelNumber).Title("<strong>Model Number</strong>").Width(100);
                    //columns.Command(command => { command.Edit(); }).Width(150);
                })
                //.ToolBar(toolbar => { toolbar.Create(); })
                .Editable(editable => editable.Mode(GridEditMode.PopUp).ConfirmDelete("Asset").DisplayDeleteConfirmation("Are you sure to delete this asset?"))
                .Selectable(selectable => selectable.Mode(GridSelectionMode.Single))
                .Pageable()
                .Scrollable()
                //.Reorderable(reorderable => reorderable.Columns(true))
                .Resizable(resizable => resizable.Columns(true))
                .Sortable()
                .Filterable()
                .HtmlAttributes(new { style = "height:600px;" })
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .PageSize(50)
                    .Events(events => events.Error("error_handler") )
                    .Model(model => {
                        model.Id(m => m.AssetId);
                        //model.Field(m => m.AssetId).Editable(false);
                    }
                )
                //.Create(c => c.Action("EditingInline_Create", "Asset"))
                //.Read(read => read.Action("EditingInline_Read", "Asset"))
                //.Update(update => update.Action("EditingInline_Update", "Asset"))
                .Destroy(d => d.Action("EditingInline_Destroy", "Asset"))
                .ServerOperation(false)             //--this is needed when no session cache is using.
            )
            .Events(e => e.Change("onChange"))
        )
        <br />
        <div class="form-group row">
            <input type="hidden" id="myId" name="assetId" value="0" />
            <input type="submit" value="Select to Update" class="k-primary" />
        </div>
    </form>

    <br />
    <div class="form-group row">
        <a asp-action="Create">Create a New Asset</a>
        @*<a class="k-button k-button-icontext" href="Asset/Create">Create Asset</a>*@
    </div>

</div>

<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
            //when there is an error, cancel the action. By JC on 07/30/2020
            $("#gridAsset").data("kendoGrid").cancelChanges();
        }
    }

    var clicks = 0;
    function onChange(e) {
        var selectedRow = this.select();
        var dataItem = this.dataItem(selectedRow);
        //console.log("--selected asset id:" + dataItem['AssetId']);
        //console.log('-- before -- selected asset id=' + $('#myId').val());

        clicks++;
        if (clicks == 2 && dataItem['AssetId'] == $('#myId').val() ) {
            //alert("dblclick event");
            clicks = 0;
            window.location.href = 'Asset/Edit?assetId=' + $('#myId').val();            
        }
        $('#myId').val(dataItem['AssetId']);
        //console.log("--selected asset id:"  + dataItem['AssetId']);
        console.log('******onChange: Index view, selected asset id=' + $('#myId').val());

        //var dblclickFlag = 'false';
        //$(selectedRow).on("dblclick", function (e) {
        //    console.log("-- selectedRow: double click event--");
        //    if (dblclickFlag == 'false') {
        //        console.log("-- selectedRow: dataItem--" + dataItem);
        //        alert("dblclick event");
        //        dbclickFlag = 'true';
        //    } else {
        //        console.log("-- flag is true: double click event--");
        //    }
        //    //event.preventDefault();
        //});
    }

    //Doesn't work
    //$('#gridAsset tbody').on('dblclick', "tr[role='row']", function (e) {
    $("#gridAsset").on("dblclick", "kendoGrid", function () {
    //$(document).on("dblclick", "kendoGrid", function (e) {
        console.log("-- double click event--");
        var grid = $("#gridAsset").data("kendoGrid");
        var model = grid.dataItem(this);
        console.log("-- double click model:" + model);
        var selectedVal = model['AssetId'];
        console.log("-- double click id:" + selectedVal);
        console.log("-- double click id:" + dataItem['AssetId']);
    });
</script>



@*<table class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.AssetTypeName)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.AssetTypeName)
                    </td>
                    <td>
                        <a asp-action="Edit" asp-route-id="@item.AssetTypeId">Edit</a> |
                        <a asp-action="Details" asp-route-id="@item.AssetTypeId">Details</a> |
                        <a asp-action="Delete" asp-route-id="@item.AssetTypeId">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>*@
